# in the termial I typed "C:\Users\burns\Anaconda3\python.exe -m pip install python-oauth2"
import time
import pandas as pd
from alpha_vantage.timeseries import TimeSeries

ts = TimeSeries(key='XDYRTHLNMO8RNZLY',output_format='pandas')
tmus_data, meta_data = ts.get_intraday(symbol="TMUS", interval='30min', outputsize='full')
vxx_data, meta_data = ts.get_intraday(symbol="vxx", interval='30min', outputsize='full')
iau_data, meta_data = ts.get_intraday(symbol="iau", interval='30min', outputsize='full')

tmus = tmus_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
vxx = vxx_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
iau = iau_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])

# Use outer join to make one dataframe
df_final = tmus.join(vxx, how='outer', rsuffix='vxx').join(iau, how='outer', rsuffix='iau')

time.sleep(60)
A_data, meta_data = ts.get_intraday(symbol="A", interval='30min', outputsize='full')
AAL_data, meta_data = ts.get_intraday(symbol="AAL", interval='30min', outputsize='full')
AAP_data, meta_data = ts.get_intraday(symbol="AAP", interval='30min', outputsize='full')
AAPL_data, meta_data = ts.get_intraday(symbol="AAPL", interval='30min', outputsize='full')
ABBV_data, meta_data = ts.get_intraday(symbol="ABBV", interval='30min', outputsize='full')
A = A_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AAL = AAL_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AAP = AAP_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AAPL = AAPL_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ABBV = ABBV_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(A, how='outer',rsuffix='A').join(AAL, how='outer',rsuffix='AAL').join(AAP, how='outer',rsuffix='AAP').join(AAPL, how='outer',rsuffix='AAPL').join(ABBV, how='outer',rsuffix='ABBV')


time.sleep(60)
ABC_data, meta_data = ts.get_intraday(symbol="ABC", interval='30min', outputsize='full')
ABMD_data, meta_data = ts.get_intraday(symbol="ABMD", interval='30min', outputsize='full')
ABT_data, meta_data = ts.get_intraday(symbol="ABT", interval='30min', outputsize='full')
ACN_data, meta_data = ts.get_intraday(symbol="ACN", interval='30min', outputsize='full')
ADBE_data, meta_data = ts.get_intraday(symbol="ADBE", interval='30min', outputsize='full')
ABC = ABC_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ABMD = ABMD_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ABT = ABT_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ACN = ACN_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ADBE = ADBE_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(ABC, how='outer',rsuffix='ABC').join(ABMD, how='outer',rsuffix='ABMD').join(ABT, how='outer',rsuffix='ABT').join(ACN, how='outer',rsuffix='ACN').join(ADBE, how='outer',rsuffix='ADBE')


time.sleep(60)
ADI_data, meta_data = ts.get_intraday(symbol="ADI", interval='30min', outputsize='full')
ADM_data, meta_data = ts.get_intraday(symbol="ADM", interval='30min', outputsize='full')
ADP_data, meta_data = ts.get_intraday(symbol="ADP", interval='30min', outputsize='full')
ADSK_data, meta_data = ts.get_intraday(symbol="ADSK", interval='30min', outputsize='full')
AEE_data, meta_data = ts.get_intraday(symbol="AEE", interval='30min', outputsize='full')
ADI = ADI_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ADM = ADM_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ADP = ADP_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ADSK = ADSK_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AEE = AEE_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(ADI, how='outer',rsuffix='ADI').join(ADM, how='outer',rsuffix='ADM').join(ADP, how='outer',rsuffix='ADP').join(ADSK, how='outer',rsuffix='ADSK').join(AEE, how='outer',rsuffix='AEE')


time.sleep(60)
AEP_data, meta_data = ts.get_intraday(symbol="AEP", interval='30min', outputsize='full')
AES_data, meta_data = ts.get_intraday(symbol="AES", interval='30min', outputsize='full')
AFL_data, meta_data = ts.get_intraday(symbol="AFL", interval='30min', outputsize='full')
AIG_data, meta_data = ts.get_intraday(symbol="AIG", interval='30min', outputsize='full')
AIV_data, meta_data = ts.get_intraday(symbol="AIV", interval='30min', outputsize='full')
AEP = AEP_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AES = AES_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AFL = AFL_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AIG = AIG_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AIV = AIV_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(AEP, how='outer',rsuffix='AEP').join(AES, how='outer',rsuffix='AES').join(AFL, how='outer',rsuffix='AFL').join(AIG, how='outer',rsuffix='AIG').join(AIV, how='outer',rsuffix='AIV')


time.sleep(60)
AIZ_data, meta_data = ts.get_intraday(symbol="AIZ", interval='30min', outputsize='full')
AJG_data, meta_data = ts.get_intraday(symbol="AJG", interval='30min', outputsize='full')
AKAM_data, meta_data = ts.get_intraday(symbol="AKAM", interval='30min', outputsize='full')
ALB_data, meta_data = ts.get_intraday(symbol="ALB", interval='30min', outputsize='full')
ALGN_data, meta_data = ts.get_intraday(symbol="ALGN", interval='30min', outputsize='full')
AIZ = AIZ_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AJG = AJG_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AKAM = AKAM_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ALB = ALB_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ALGN = ALGN_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(AIZ, how='outer',rsuffix='AIZ').join(AJG, how='outer',rsuffix='AJG').join(AKAM, how='outer',rsuffix='AKAM').join(ALB, how='outer',rsuffix='ALB').join(ALGN, how='outer',rsuffix='ALGN')


time.sleep(60)
ALK_data, meta_data = ts.get_intraday(symbol="ALK", interval='30min', outputsize='full')
ALL_data, meta_data = ts.get_intraday(symbol="ALL", interval='30min', outputsize='full')
ALLE_data, meta_data = ts.get_intraday(symbol="ALLE", interval='30min', outputsize='full')
ALXN_data, meta_data = ts.get_intraday(symbol="ALXN", interval='30min', outputsize='full')
AMAT_data, meta_data = ts.get_intraday(symbol="AMAT", interval='30min', outputsize='full')
ALK = ALK_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ALL = ALL_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ALLE = ALLE_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ALXN = ALXN_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AMAT = AMAT_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(ALK, how='outer',rsuffix='ALK').join(ALL, how='outer',rsuffix='ALL').join(ALLE, how='outer',rsuffix='ALLE').join(ALXN, how='outer',rsuffix='ALXN').join(AMAT, how='outer',rsuffix='AMAT')


time.sleep(60)
AMCR_data, meta_data = ts.get_intraday(symbol="AMCR", interval='30min', outputsize='full')
AMD_data, meta_data = ts.get_intraday(symbol="AMD", interval='30min', outputsize='full')
AME_data, meta_data = ts.get_intraday(symbol="AME", interval='30min', outputsize='full')
AMGN_data, meta_data = ts.get_intraday(symbol="AMGN", interval='30min', outputsize='full')
AMP_data, meta_data = ts.get_intraday(symbol="AMP", interval='30min', outputsize='full')
AMCR = AMCR_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AMD = AMD_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AME = AME_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AMGN = AMGN_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AMP = AMP_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(AMCR, how='outer',rsuffix='AMCR').join(AMD, how='outer',rsuffix='AMD').join(AME, how='outer',rsuffix='AME').join(AMGN, how='outer',rsuffix='AMGN').join(AMP, how='outer',rsuffix='AMP')


time.sleep(60)
AMT_data, meta_data = ts.get_intraday(symbol="AMT", interval='30min', outputsize='full')
AMZN_data, meta_data = ts.get_intraday(symbol="AMZN", interval='30min', outputsize='full')
ANET_data, meta_data = ts.get_intraday(symbol="ANET", interval='30min', outputsize='full')
ANSS_data, meta_data = ts.get_intraday(symbol="ANSS", interval='30min', outputsize='full')
ANTM_data, meta_data = ts.get_intraday(symbol="ANTM", interval='30min', outputsize='full')
AMT = AMT_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AMZN = AMZN_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ANET = ANET_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ANSS = ANSS_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ANTM = ANTM_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(AMT, how='outer',rsuffix='AMT').join(AMZN, how='outer',rsuffix='AMZN').join(ANET, how='outer',rsuffix='ANET').join(ANSS, how='outer',rsuffix='ANSS').join(ANTM, how='outer',rsuffix='ANTM')


time.sleep(60)
AON_data, meta_data = ts.get_intraday(symbol="AON", interval='30min', outputsize='full')
AOS_data, meta_data = ts.get_intraday(symbol="AOS", interval='30min', outputsize='full')
APA_data, meta_data = ts.get_intraday(symbol="APA", interval='30min', outputsize='full')
APD_data, meta_data = ts.get_intraday(symbol="APD", interval='30min', outputsize='full')
APH_data, meta_data = ts.get_intraday(symbol="APH", interval='30min', outputsize='full')
AON = AON_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AOS = AOS_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
APA = APA_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
APD = APD_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
APH = APH_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(AON, how='outer',rsuffix='AON').join(AOS, how='outer',rsuffix='AOS').join(APA, how='outer',rsuffix='APA').join(APD, how='outer',rsuffix='APD').join(APH, how='outer',rsuffix='APH')


time.sleep(60)
APTV_data, meta_data = ts.get_intraday(symbol="APTV", interval='30min', outputsize='full')
ARE_data, meta_data = ts.get_intraday(symbol="ARE", interval='30min', outputsize='full')
ATO_data, meta_data = ts.get_intraday(symbol="ATO", interval='30min', outputsize='full')
ATVI_data, meta_data = ts.get_intraday(symbol="ATVI", interval='30min', outputsize='full')
AVB_data, meta_data = ts.get_intraday(symbol="AVB", interval='30min', outputsize='full')
APTV = APTV_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ARE = ARE_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ATO = ATO_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
ATVI = ATVI_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AVB = AVB_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(APTV, how='outer',rsuffix='APTV').join(ARE, how='outer',rsuffix='ARE').join(ATO, how='outer',rsuffix='ATO').join(ATVI, how='outer',rsuffix='ATVI').join(AVB, how='outer',rsuffix='AVB')


time.sleep(60)
AVGO_data, meta_data = ts.get_intraday(symbol="AVGO", interval='30min', outputsize='full')
AVY_data, meta_data = ts.get_intraday(symbol="AVY", interval='30min', outputsize='full')
AWK_data, meta_data = ts.get_intraday(symbol="AWK", interval='30min', outputsize='full')
AXP_data, meta_data = ts.get_intraday(symbol="AXP", interval='30min', outputsize='full')
AZO_data, meta_data = ts.get_intraday(symbol="AZO", interval='30min', outputsize='full')
AVGO = AVGO_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AVY = AVY_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AWK = AWK_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AXP = AXP_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
AZO = AZO_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(AVGO, how='outer',rsuffix='AVGO').join(AVY, how='outer',rsuffix='AVY').join(AWK, how='outer',rsuffix='AWK').join(AXP, how='outer',rsuffix='AXP').join(AZO, how='outer',rsuffix='AZO')


time.sleep(60)
BA_data, meta_data = ts.get_intraday(symbol="BA", interval='30min', outputsize='full')
BAC_data, meta_data = ts.get_intraday(symbol="BAC", interval='30min', outputsize='full')
BAX_data, meta_data = ts.get_intraday(symbol="BAX", interval='30min', outputsize='full')
BBY_data, meta_data = ts.get_intraday(symbol="BBY", interval='30min', outputsize='full')
BDX_data, meta_data = ts.get_intraday(symbol="BDX", interval='30min', outputsize='full')
BA = BA_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BAC = BAC_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BAX = BAX_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BBY = BBY_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BDX = BDX_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(BA, how='outer',rsuffix='BA').join(BAC, how='outer',rsuffix='BAC').join(BAX, how='outer',rsuffix='BAX').join(BBY, how='outer',rsuffix='BBY').join(BDX, how='outer',rsuffix='BDX')


time.sleep(60)
BEN_data, meta_data = ts.get_intraday(symbol="BEN", interval='30min', outputsize='full')
BIIB_data, meta_data = ts.get_intraday(symbol="BIIB", interval='30min', outputsize='full')
BIO_data, meta_data = ts.get_intraday(symbol="BIO", interval='30min', outputsize='full')
BK_data, meta_data = ts.get_intraday(symbol="BK", interval='30min', outputsize='full')
BEN = BEN_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BIIB = BIIB_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BIO = BIO_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BK = BK_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(BEN, how='outer',rsuffix='BEN').join(BIIB, how='outer',rsuffix='BIIB').join(BIO, how='outer',rsuffix='BIO').join(BK, how='outer',rsuffix='BK')


time.sleep(60)
BKNG_data, meta_data = ts.get_intraday(symbol="BKNG", interval='30min', outputsize='full')
BKR_data, meta_data = ts.get_intraday(symbol="BKR", interval='30min', outputsize='full')
BLK_data, meta_data = ts.get_intraday(symbol="BLK", interval='30min', outputsize='full')
BLL_data, meta_data = ts.get_intraday(symbol="BLL", interval='30min', outputsize='full')
BMY_data, meta_data = ts.get_intraday(symbol="BMY", interval='30min', outputsize='full')
BKNG = BKNG_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BKR = BKR_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BLK = BLK_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BLL = BLL_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BMY = BMY_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(BKNG, how='outer',rsuffix='BKNG').join(BKR, how='outer',rsuffix='BKR').join(BLK, how='outer',rsuffix='BLK').join(BLL, how='outer',rsuffix='BLL').join(BMY, how='outer',rsuffix='BMY')


time.sleep(60)
BR_data, meta_data = ts.get_intraday(symbol="BR", interval='30min', outputsize='full')
BSX_data, meta_data = ts.get_intraday(symbol="BSX", interval='30min', outputsize='full')
BWA_data, meta_data = ts.get_intraday(symbol="BWA", interval='30min', outputsize='full')
BXP_data, meta_data = ts.get_intraday(symbol="BXP", interval='30min', outputsize='full')
BR = BR_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BSX = BSX_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BWA = BWA_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
BXP = BXP_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(BR, how='outer',rsuffix='BR').join(BSX, how='outer',rsuffix='BSX').join(BWA, how='outer',rsuffix='BWA').join(BXP, how='outer',rsuffix='BXP')


time.sleep(60)
C_data, meta_data = ts.get_intraday(symbol="C", interval='30min', outputsize='full')
CAG_data, meta_data = ts.get_intraday(symbol="CAG", interval='30min', outputsize='full')
CAH_data, meta_data = ts.get_intraday(symbol="CAH", interval='30min', outputsize='full')
CARR_data, meta_data = ts.get_intraday(symbol="CARR", interval='30min', outputsize='full')
CAT_data, meta_data = ts.get_intraday(symbol="CAT", interval='30min', outputsize='full')
C = C_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CAG = CAG_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CAH = CAH_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CARR = CARR_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CAT = CAT_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(C, how='outer',rsuffix='C').join(CAG, how='outer',rsuffix='CAG').join(CAH, how='outer',rsuffix='CAH').join(CARR, how='outer',rsuffix='CARR').join(CAT, how='outer',rsuffix='CAT')


time.sleep(60)
CB_data, meta_data = ts.get_intraday(symbol="CB", interval='30min', outputsize='full')
CBOE_data, meta_data = ts.get_intraday(symbol="CBOE", interval='30min', outputsize='full')
CBRE_data, meta_data = ts.get_intraday(symbol="CBRE", interval='30min', outputsize='full')
CCI_data, meta_data = ts.get_intraday(symbol="CCI", interval='30min', outputsize='full')
CCL_data, meta_data = ts.get_intraday(symbol="CCL", interval='30min', outputsize='full')
CB = CB_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CBOE = CBOE_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CBRE = CBRE_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CCI = CCI_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CCL = CCL_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(CB, how='outer',rsuffix='CB').join(CBOE, how='outer',rsuffix='CBOE').join(CBRE, how='outer',rsuffix='CBRE').join(CCI, how='outer',rsuffix='CCI').join(CCL, how='outer',rsuffix='CCL')


time.sleep(60)
CDNS_data, meta_data = ts.get_intraday(symbol="CDNS", interval='30min', outputsize='full')
CDW_data, meta_data = ts.get_intraday(symbol="CDW", interval='30min', outputsize='full')
CE_data, meta_data = ts.get_intraday(symbol="CE", interval='30min', outputsize='full')
CERN_data, meta_data = ts.get_intraday(symbol="CERN", interval='30min', outputsize='full')
CF_data, meta_data = ts.get_intraday(symbol="CF", interval='30min', outputsize='full')
CDNS = CDNS_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CDW = CDW_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CE = CE_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CERN = CERN_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CF = CF_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(CDNS, how='outer',rsuffix='CDNS').join(CDW, how='outer',rsuffix='CDW').join(CE, how='outer',rsuffix='CE').join(CERN, how='outer',rsuffix='CERN').join(CF, how='outer',rsuffix='CF')


time.sleep(60)
CFG_data, meta_data = ts.get_intraday(symbol="CFG", interval='30min', outputsize='full')
CHD_data, meta_data = ts.get_intraday(symbol="CHD", interval='30min', outputsize='full')
CHRW_data, meta_data = ts.get_intraday(symbol="CHRW", interval='30min', outputsize='full')
CHTR_data, meta_data = ts.get_intraday(symbol="CHTR", interval='30min', outputsize='full')
CI_data, meta_data = ts.get_intraday(symbol="CI", interval='30min', outputsize='full')
CFG = CFG_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CHD = CHD_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CHRW = CHRW_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CHTR = CHTR_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CI = CI_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(CFG, how='outer',rsuffix='CFG').join(CHD, how='outer',rsuffix='CHD').join(CHRW, how='outer',rsuffix='CHRW').join(CHTR, how='outer',rsuffix='CHTR').join(CI, how='outer',rsuffix='CI')


time.sleep(60)
CINF_data, meta_data = ts.get_intraday(symbol="CINF", interval='30min', outputsize='full')
CL_data, meta_data = ts.get_intraday(symbol="CL", interval='30min', outputsize='full')
CLX_data, meta_data = ts.get_intraday(symbol="CLX", interval='30min', outputsize='full')
CMA_data, meta_data = ts.get_intraday(symbol="CMA", interval='30min', outputsize='full')
CMCSA_data, meta_data = ts.get_intraday(symbol="CMCSA", interval='30min', outputsize='full')
CINF = CINF_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CL = CL_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CLX = CLX_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CMA = CMA_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CMCSA = CMCSA_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(CINF, how='outer',rsuffix='CINF').join(CL, how='outer',rsuffix='CL').join(CLX, how='outer',rsuffix='CLX').join(CMA, how='outer',rsuffix='CMA').join(CMCSA, how='outer',rsuffix='CMCSA')


time.sleep(60)
CME_data, meta_data = ts.get_intraday(symbol="CME", interval='30min', outputsize='full')
CMG_data, meta_data = ts.get_intraday(symbol="CMG", interval='30min', outputsize='full')
CMI_data, meta_data = ts.get_intraday(symbol="CMI", interval='30min', outputsize='full')
CMS_data, meta_data = ts.get_intraday(symbol="CMS", interval='30min', outputsize='full')
CNC_data, meta_data = ts.get_intraday(symbol="CNC", interval='30min', outputsize='full')
CME = CME_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CMG = CMG_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CMI = CMI_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CMS = CMS_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CNC = CNC_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(CME, how='outer',rsuffix='CME').join(CMG, how='outer',rsuffix='CMG').join(CMI, how='outer',rsuffix='CMI').join(CMS, how='outer',rsuffix='CMS').join(CNC, how='outer',rsuffix='CNC')


time.sleep(60)
CNP_data, meta_data = ts.get_intraday(symbol="CNP", interval='30min', outputsize='full')
COF_data, meta_data = ts.get_intraday(symbol="COF", interval='30min', outputsize='full')
COG_data, meta_data = ts.get_intraday(symbol="COG", interval='30min', outputsize='full')
COO_data, meta_data = ts.get_intraday(symbol="COO", interval='30min', outputsize='full')
COP_data, meta_data = ts.get_intraday(symbol="COP", interval='30min', outputsize='full')
CNP = CNP_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
COF = COF_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
COG = COG_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
COO = COO_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
COP = COP_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(CNP, how='outer',rsuffix='CNP').join(COF, how='outer',rsuffix='COF').join(COG, how='outer',rsuffix='COG').join(COO, how='outer',rsuffix='COO').join(COP, how='outer',rsuffix='COP')


time.sleep(60)
COST_data, meta_data = ts.get_intraday(symbol="COST", interval='30min', outputsize='full')
COTY_data, meta_data = ts.get_intraday(symbol="COTY", interval='30min', outputsize='full')
CPB_data, meta_data = ts.get_intraday(symbol="CPB", interval='30min', outputsize='full')
CPRT_data, meta_data = ts.get_intraday(symbol="CPRT", interval='30min', outputsize='full')
CRM_data, meta_data = ts.get_intraday(symbol="CRM", interval='30min', outputsize='full')
COST = COST_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
COTY = COTY_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CPB = CPB_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CPRT = CPRT_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CRM = CRM_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(COST, how='outer',rsuffix='COST').join(COTY, how='outer',rsuffix='COTY').join(CPB, how='outer',rsuffix='CPB').join(CPRT, how='outer',rsuffix='CPRT').join(CRM, how='outer',rsuffix='CRM')


time.sleep(60)
CSCO_data, meta_data = ts.get_intraday(symbol="CSCO", interval='30min', outputsize='full')
CSX_data, meta_data = ts.get_intraday(symbol="CSX", interval='30min', outputsize='full')
CTAS_data, meta_data = ts.get_intraday(symbol="CTAS", interval='30min', outputsize='full')
CTSH_data, meta_data = ts.get_intraday(symbol="CTSH", interval='30min', outputsize='full')
CSCO = CSCO_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CSX = CSX_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CTAS = CTAS_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
CTSH = CTSH_data.drop(columns = ['1. open', '2. high', '3. low', '5. volume'])
df_final = df_final.join(CSCO, how='outer',rsuffix='CSCO').join(CSX, how='outer',rsuffix='CSX').join(CTAS, how='outer',rsuffix='CTAS').join(CTSH, how='outer',rsuffix='CTSH')


hours = df_final.index.hour
df_final['Hour'] = hours
pd.concat([df_final, pd.DataFrame(hours, index=df_final.index)], axis = 1)
print(df_final.describe())
print(df_final.head(7))

df_filtered = df_final[df_final['Hour'] >= 10]
df_filtered = df_filtered[df_final['Hour'] <= 16]
print(df_filtered.head(17))

df_final.to_csv('test2.csv', sep=',', encoding='utf-8')
df_filtered.to_csv('test3.csv', sep=',', encoding='utf-8')